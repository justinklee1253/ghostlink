import { X } from "lucide-react";
import AvatarSection from "./sections/avatar";
import IconsSection from "./sections/icons";
import PostButtonSection from "./sections/post";
import React, { useRef, useState } from "react";

interface PostMockUpProps {
  linkedInPost4o: React.ReactNode; // Use ReactNode to accept JSX content
  linkedInPost4oMini: React.ReactNode;
}

const PostMockUp = ({ linkedInPost4o, linkedInPost4oMini }: PostMockUpProps) => {
  const [uploadedImages4o, setUploadedImages4o] = useState<string[]>([]);
  const [uploadedImages4oMini, setUploadedImages4oMini] = useState<string[]>([]);
  const fileInputRef4o = useRef<HTMLInputElement | null>(null);
  const fileInputRef4oMini = useRef<HTMLInputElement | null>(null);

  const handleImageUpload4o = (imageUrl: string) => {
    setUploadedImages4o((prevImages) => [...prevImages, imageUrl]);
  };

  const handleImageUpload4oMini = (imageUrl: string) => {
    setUploadedImages4oMini((prevImages) => [...prevImages, imageUrl]);
  };

  const resetFileInput = (ref: React.RefObject<HTMLInputElement>) => {
    if (ref.current) {
      ref.current.value = "";
    }
  };

  const handleRemoveImage4o = (index: number) => {
    setUploadedImages4o((prevImages) => prevImages.filter((_, i) => i !== index));
    resetFileInput(fileInputRef4o);
  };

  const handleRemoveImage4oMini = (index: number) => {
    setUploadedImages4oMini((prevImages) => prevImages.filter((_, i) => i !== index));
    resetFileInput(fileInputRef4oMini);
  };

  return (
    <div className="flex flex-col lg:flex-row gap-10 p-5 lg:p-10">
      {/* First Post Area */}
      <div className="flex flex-col items-stretch">
        <h1 className="mb-4 text-center text-lg text-white">Generated by 4o:</h1>
        <div className="flex flex-col rounded-xl border bg-white p-4 space-y-4 h-[85vh] w-full lg:w-[45vw]">
          <AvatarSection />
          <div className="flex-grow overflow-y-auto">{linkedInPost4o}</div>
          {/* Display uploaded images */}
          {uploadedImages4o.map((image, index) => (
            <div key={index} className="relative mt-2">
              <img src={image} alt={`Uploaded ${index}`} className="max-h-40 rounded border" />
              <button
                onClick={() => handleRemoveImage4o(index)}
                className="absolute top-1 right-1 bg-gray-700 text-white rounded-full p-1 hover:bg-red-500"
                aria-label="Remove Image"
              >
                <X size={16} />
              </button>
            </div>
          ))}
          {/* Icons positioned below the text */}
          <IconsSection onImageUpload={handleImageUpload4o} fileInputRef={fileInputRef4o} />
          <PostButtonSection />
        </div>
      </div>

      {/* Second Post Area */}
      <div className="flex flex-col items-stretch">
        <h1 className="mb-4 text-center text-lg text-white">Generated by 4o Mini:</h1>
        <div className="flex flex-col rounded-xl border bg-white p-4 space-y-4 h-[85vh] w-full lg:w-[45vw]">
          <AvatarSection />
          <div className="flex-grow overflow-y-auto">{linkedInPost4oMini}</div>
          {/* Display uploaded images */}
          {uploadedImages4oMini.map((image, index) => (
            <div key={index} className="relative mt-2">
              <img src={image} alt={`Uploaded ${index}`} className="max-h-40 rounded border" />
              <button
                onClick={() => handleRemoveImage4oMini(index)}
                className="absolute top-1 right-1 bg-gray-700 text-white rounded-full p-1 hover:bg-red-500"
                aria-label="Remove Image"
              >
                <X size={16} />
              </button>
            </div>
          ))}
          {/* Icons positioned below the text */}
          <IconsSection onImageUpload={handleImageUpload4oMini} fileInputRef={fileInputRef4oMini} />
          <PostButtonSection />
        </div>
      </div>
    </div>
  );
};

export default PostMockUp;
